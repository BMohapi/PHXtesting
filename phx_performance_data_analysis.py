# -*- coding: utf-8 -*-
"""PHX performance data analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JSv4XVUnXNW8C6AVsMBwE-zs8xuy0Sgi
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install CoolProp
!pip install --upgrade gspread
from IPython.display import clear_output
clear_output()

# standard python packages:

# %matplotlib inline
import numpy as np
import math
import operator
from numpy import *
import scipy.linalg
from scipy.integrate import odeint
from scipy.optimize import fsolve
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
import time
from IPython.display import HTML, display
import csv
from google.colab import files
from google.colab import drive
from google.colab import auth
auth.authenticate_user()

import warnings
from IPython.display import Image
from numpy import interp
import os
from scipy import signal
# %matplotlib inline
import pandas as pd
import gspread
from oauth2client.client import GoogleCredentials

import CoolProp.CoolProp as CP
from CoolProp.Plots import PropertyPlot
from CoolProp.HumidAirProp import HAPropsSI
from CoolProp.CoolProp import PropsSI


drive.mount('/content/drive')

# # all python scripts and outputs will be saved in the following directory
directory = "/content/drive/My Drive/Treau Team/Engineering/Pythons/"

gc = gspread.authorize(GoogleCredentials.get_application_default())

HX = gc.open('08162021 - 84 Sheet PHX Performance with bottom shims').get_worksheet(4)
                                                                                              
end_row = int(HX.cell(5,1).value[15:18])+8
data={}

for i in range(3,27): #from 1 to 26
  data1 = HX.col_values(i)[8:end_row]
  data[i] = [float(num_str) for num_str in data1]

#Water in
W_in = data.get(3)
W_in2 = data.get(4)
W_in.extend(W_in2)
aw_in = np.average(W_in)
stdw_in = np.std(W_in)
HX.update_cell(8,3,"Water Inlet Temp (C)")
HX.update_cell(8,4,"Water Inlet Temp (C)")


#Water out
W_out = data.get(5)
W_out2 = data.get(6)
W_out.extend(W_out2)
aw_out = np.average(W_out)
stdw_out = np.std(W_out)
HX.update_cell(8,5,"Water Outlet Temp (C)")
HX.update_cell(8,6,"Water Outlet Temp (C)")


#Air in
A_in = data.get(7)
A_in2 = data.get(8)
A_in.extend(A_in2)
aa_in = np.average(A_in)
stda_in = np.std(A_in)
HX.update_cell(8,7,"Air Inlet Temp (C)")
HX.update_cell(8,8,"Air Inlet Temp (C)")

#Air out
A_out = data.get(9)
for i in range(10,27):
  HX.update_cell(8,i-1,"Air Outlet Temp(C)")
  A_out.extend(data.get(i))
  if i ==26:
    HX.update_cell(8,26,"Air Outlet Temp(C)")

aa_out = np.average(A_out)
stda_out = np.std(A_out)



## THERMODYNAMIC CALCULATIONS
#Average fluid temperatures
avAT = (aa_in+aa_out)/2
avWT =  (aw_in+aw_out)/2

#Temperature differences
delTW = aw_in-aw_out
delTW_err = np.sqrt(((0.0012+(stdw_out/aw_out))**2)+((0.0012+(stdw_in/aw_in))**2))

delTA = aa_out-aa_in 
delTA_err = np.sqrt(((0.0012+(stda_out/aa_out))**2)+((0.0012+(stda_in/aa_in))**2))



#Heat capacities
atm_P = 101375
CpW = PropsSI('C','T',avWT+273.15,'P',atm_P,'INCOMP::MPG-34.7%')/1000
CpA = (PropsSI('C','T',avAT+273.15,'P',atm_P,'Air'))/1000

#Densities
rhoW = PropsSI('D','T',avWT+273.15,'P',atm_P,'INCOMP::MPG-34.7%')
rhoA = PropsSI('D','T',avAT+273.15,'P',atm_P,'Air')



#PHX Properties
Pouch_count = 84
Pouch_active_length = 0.335
Pouch_active_width = 0.065
Pouch_active_area = 2*(Pouch_active_length*Pouch_active_width)
PHX_active_area = Pouch_active_area*Pouch_count




## Writitng data at the end of the spreadsheet
# Levels
avlevel = end_row+2
stdlevel = avlevel+1
calclevel = stdlevel+3
print(end_row)


##Flow measurements

#Air flow (m3/s)
vol_flowA = (float(HX.cell(1,4).value))*0.00047194745



#Water flow calculations
Water_flow_rate = 0.00007328538229


#Energy balance (kW)
P_Water = rhoW*CpW*Water_flow_rate*delTW
P_Air = rhoA*CpA*vol_flowA*delTA
Av_Power = (P_Water+P_Air)/2
PercDiff_Power = np.abs(((P_Water-P_Air)/((P_Water+P_Air)/2))*100)




#Data Array
Data2 = [delTW,delTA,avWT,avAT,Water_flow_rate,vol_flowA,CpW,rhoW,CpA,rhoA,P_Water,P_Air,Av_Power,PercDiff_Power,Pouch_count,Pouch_active_length,Pouch_active_width,Pouch_active_area,PHX_active_area]

#Writng labels into last columns
HX.update_cell(avlevel,1,"Average Temps (C)")
HX.update_cell(stdlevel,1,"Temp SDs (C)")

#Averages
HX.update_cell(avlevel,4,aw_in)
HX.update_cell(avlevel,6,aw_out)
HX.update_cell(avlevel,8,aa_in)
HX.update_cell(avlevel,26,aa_out)

#Standard deviations
HX.update_cell(stdlevel,4,stdw_in)
HX.update_cell(stdlevel,6,stdw_out)
HX.update_cell(stdlevel,8,stda_in)
HX.update_cell(stdlevel,26,stda_out)


##First Calculation Labeling

HX.update_cell(calclevel,1,"Water Temp Difference (C)")
HX.update_cell(calclevel+1,1,"Air Temp Difference (C)")
HX.update_cell(calclevel+2,1,"Water Avg Temp (C)")
HX.update_cell(calclevel+3,1,"Air Avg Temp (C)")
HX.update_cell(calclevel+4,1,"Water volume flowrate (m3/s)")
HX.update_cell(calclevel+5,1,"Air volume flowrate (m3/s)")
HX.update_cell(calclevel+6,1,"Specific Heat of water (J/kgK)")
HX.update_cell(calclevel+7,1,"Density of Water (Kg/m3)")
HX.update_cell(calclevel+8,1,"Specific Heat of Air (J/KgK")
HX.update_cell(calclevel+9,1,"Density of Air (Kg/m3)")
HX.update_cell(calclevel+10,1,"Power loss by water (kW)")
HX.update_cell(calclevel+11,1,"Power gain of air (kW)")
HX.update_cell(calclevel+12,1,"Average Power Transfered (kW)")
HX.update_cell(calclevel+13,1,"Percent difference in air and water power")
HX.update_cell(calclevel+14,1,"Number of pouches")
HX.update_cell(calclevel+15,1,"Pouch active length (m)")
HX.update_cell(calclevel+16,1,"Pouch active width (m)")
HX.update_cell(calclevel+17,1,"Pouch active area (m2)")
HX.update_cell(calclevel+18,1,"PHX Total active area (m2)")


for i in range(len(Data2)):
	HX.update_cell(calclevel+i,2,Data2[i])

#Errors labels
HX.update_cell(calclevel,3,"Delta Water Temp Err (C)")
HX.update_cell(calclevel+1,3,"Delta Air Temp Err (C)")
HX.update_cell(calclevel,4,delTW_err)
HX.update_cell(calclevel+1,4,delTA_err)
HX.update_cell(calclevel+4,3,"Delta Water Flow Err (m3/s)")
HX.update_cell(calclevel+5,3,"Delta Air Flow Err (m3/s)")
HX.update_cell(calclevel+4,4,delTW_err)
HX.update_cell(calclevel+5,4,delTA_err)

##LMTD Calculations
DeltaTs = (aw_in-aa_out)-(aw_out-aa_in)
LnT1 = np.log((aw_in-aa_out))
LnT2 = np.log((aw_out-aa_in))
LMTD_Counter = DeltaTs/(LnT1-LnT2)
UA1 = (P_Water*1000)/LMTD_Counter
U1 = UA1/PHX_active_area
UA2 = (P_Air*1000)/LMTD_Counter
U2 = UA2/PHX_active_area


##e-NTU Calculations
mdotCA = vol_flowA*CpA*rhoA*1000
mdotCW = Water_flow_rate*CpW*rhoW*1000
min_mdotC = np.array([mdotCA,mdotCW]).min()
max_mdotC = np.array([mdotCA,mdotCW]).max()
P_max = min_mdotC*(aw_in-aa_in)
R = min_mdotC/max_mdotC

eff1 = (P_Water*1000)/P_max
NTUmod = np.linspace(0,10,100000)
effmod = 1-np.exp((1/R)*(NTUmod**0.22)*(np.exp(-R*(NTUmod**0.78))-1))
diff1 = abs(np.array(effmod-eff1))
minVal1 = np.min(diff1)
ind1 = np.argmin(diff1)
NTU1 = NTUmod[ind1]
UA3 = NTU1*min_mdotC
U3 = UA3/PHX_active_area

eff2 = (P_Air*1000)/P_max
NTUmod = np.linspace(0,10,100000)
effmod = 1-np.exp((1/R)*(NTUmod**0.22)*(np.exp(-R*(NTUmod**0.78))-1))
diff2 = abs(np.array(effmod-eff2))
minVal2 = np.min(diff2)
ind2 = np.argmin(diff2)
NTU2 = NTUmod[ind2]
UA4 = NTU2*min_mdotC
U4 = UA4/PHX_active_area


#Error calculations
A = np.abs(((aw_out-aa_in)-(aw_in-aa_out))/(aw_out-aa_in))
B = np.log((aw_out-aa_in)/(aw_in-aa_out))
C = (((0.0012*aw_out)+stdw_out)+((0.0012*aa_in)+stda_in))
D = ((aw_out-aa_in)-(aw_in-aa_out))/((aw_in-aa_out))
E = ((0.0012*aw_in)+stdw_out)+((0.0012*aa_out)+stda_out)
Err_LMTD = (((A-B)*C)+((D-B)*E))/(B**2)

#print(Err_LMTD)

delTW_err = np.sqrt(((0.0012+(stdw_in/aw_in)**2))+((0.0012+(stdw_out/aw_out))**2))
delTA_err = np.sqrt(((0.0012+(stda_in/aa_in)**2))+((0.0012+(stda_out/aa_out))**2))
Err_Area = 0.0781
Err_flowW = 0.000001124801862
Err_flowA = 0.05*vol_flowA
Err_QW = P_Water*1000*(np.sqrt(((delTW_err/delTW)**2)+((Err_flowW/Water_flow_rate)**2)))
Err_QA = P_Air*1000*(np.sqrt(((delTA_err/delTA)**2)+((Err_flowA/vol_flowA)**2)))
Err_Q = np.sqrt((Err_QW**2)+(Err_QA**2))

Err_U = (Err_Q/(PHX_active_area*LMTD_Counter)) +((Av_Power*1000*Err_LMTD)/(PHX_active_area*(LMTD_Counter**2)))+((Av_Power*1000*Err_Area)/(LMTD_Counter*(PHX_active_area**2)))

##LMTD and NTU Calculations Labels
HX.update_cell(calclevel,8,"U1_LMTD Water(W/Km^2)")
HX.update_cell(calclevel+1,8,"U2_LMTD Air(W/Km^2)")
HX.update_cell(calclevel+2,8,"U3_NTU Water(W/Km^2)")
HX.update_cell(calclevel+3,8,"U4_NTU Air(W/Km^2)")
HX.update_cell(calclevel,9,U1)
HX.update_cell(calclevel+1,9,U2)
HX.update_cell(calclevel+2,9,U3)
HX.update_cell(calclevel+3,9,U4)



#print(Err_U)
print(mdotCW)
print(mdotCA)
print(R)
print(eff1)
print(eff2)
#print(AvU)